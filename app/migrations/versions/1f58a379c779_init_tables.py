"""Init tables

Revision ID: 1f58a379c779
Revises:
Create Date: 2024-10-23 18:58:20.811736

"""

from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "1f58a379c779"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tags",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("last_updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("value", sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("value"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("last_updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column(
            "email", sqlmodel.sql.sqltypes.AutoString(length=320), nullable=False
        ),
        sa.Column(
            "password", sqlmodel.sql.sqltypes.AutoString(length=60), nullable=False
        ),
        sa.Column(
            "first_name", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True
        ),
        sa.Column(
            "last_name", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_email_verified", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "organizations",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("last_updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("logo_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("about", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("owner_id", sa.Uuid(), nullable=False),
        sa.Column("members", sa.JSON(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "otp_records",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("last_updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("code", sqlmodel.sql.sqltypes.AutoString(length=6), nullable=False),
        sa.Column(
            "purpose",
            sa.Enum("EMAIL_VERIFICATION", "PASSWORD_RESET", name="otppurpose"),
            nullable=False,
        ),
        sa.Column("expires_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "events",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("last_updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column(
            "source",
            sa.Enum("EVENTTRAKKA", "EXTERNAL", name="eventsource"),
            nullable=False,
        ),
        sa.Column("organization_id", sa.Uuid(), nullable=True),
        sa.Column(
            "status",
            sa.Enum("DRAFT", "OPEN", "CLOSE", "ARCHIVE", name="eventpublicationstatus"),
            nullable=False,
        ),
        sa.Column(
            "mode_of_attending",
            sa.Enum("VIRTUAL", "PHYSICAL", name="eventmode"),
            nullable=False,
        ),
        sa.Column(
            "title", sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False
        ),
        sa.Column("theme", sqlmodel.sql.sqltypes.AutoString(length=128), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("fee", sa.JSON(none_as_null=True), nullable=True),
        sa.Column("starts_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("ends_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column(
            "location", sqlmodel.sql.sqltypes.AutoString(length=128), nullable=True
        ),
        sa.Column("link", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "passcode", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=True
        ),
        sa.Column("attendee_questionnaire", sa.JSON(none_as_null=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["organization_id"], ["organizations.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "event_officials",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("last_updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("event_id", sa.Uuid(), nullable=True),
        sa.Column(
            "type",
            sa.Enum("HOST", "KEY_NOTE_SPEAKER", name="eventofficialtype"),
            nullable=False,
        ),
        sa.Column(
            "first_name", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False
        ),
        sa.Column(
            "last_name", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False
        ),
        sa.Column("role", sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
        sa.Column("contact_information", sa.JSON(none_as_null=True), nullable=True),
        sa.ForeignKeyConstraint(["event_id"], ["events.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "eventtags",
        sa.Column("tag_id", sa.Uuid(), nullable=False),
        sa.Column("event_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["events.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tags.id"],
        ),
        sa.PrimaryKeyConstraint("tag_id", "event_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("eventtags")
    op.drop_table("event_officials")
    op.drop_table("events")
    op.drop_table("otp_records")
    op.drop_table("organizations")
    op.drop_table("users")
    op.drop_table("tags")
    # ### end Alembic commands ###
